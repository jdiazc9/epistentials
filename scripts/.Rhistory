a_1
a_4 <- fee_coefs$intercept[4]
b_4 <- fee_coefs$slope[4]
predicted_fun <- 0 + a_1 + a_4 + b_4*a_1
predicted_fun
target <- c(1,0,0,1,0,0,0,0) # the out-of-sample assemblage of interest
predicted_fun <- predictF(df, target)
predicted_fun
targets <- as.data.frame(matrix(c(1,0,0,1,0,0,0,0,
0,0,0,1,1,1,1,1),
nrow = 2,
byrow = T))
colnames(targets) <- paste('sp_', 1:8, sep = '')
head(targets)
predictF(df, targets)
targets <- test_set[, 1:8]
rm(list = ls())
require(testthat)
require(ggplot2)
require(tidyr)
require(gtools)
require(combinat)
require(MASS)
source('basic_functions.R')
df <- read.csv('../data_sets/pyoverdine-training_Diaz-Colunga2024.csv')
head(df)
nrow(unique(df[, 1:8]))
nrow(df)
df2 <- read.csv('../data_sets/butyrate_Clark2021.csv')
nrow(unique(df2[, 1:25]))
counts <- table(do.call(paste, df2[, 1:25]))
hist(counts, breaks = 20)
head(as.data.frame(sort(counts, decreasing = TRUE)))
fraction_high <- sum(df2$function. > 30) / nrow(df2)
fraction_high
df2_rowAvgs <- aggregate(function. ~ .,
data = df2,
FUN = mean)
fraction_high <- sum(df2_rowAvgs$function. > 30) / nrow(df2_rowAvgs)
fraction_high
df_xylose <- read.csv('../data_sets/xylose_Langenheder2010.csv')
plotLandscape(df_xylose)
plotLandscape(df)
df_rep1 <- df[, 1:9]
delta_Fs <- structureData(df_rep1)
head(delta_Fs)
delta_Fs <- structureData(df)
head(delta_Fs)
ggplot(delta_Fs, aes(x = delta_fun.mean)) +
geom_histogram(bins = 20) +
facet_wrap(~focal_element) +
geom_vline(xintercept = 0,
color = 'gray')
plotFEEs(df)
plotFEEs(df, mode = 'plusone')
plotFEEs(df, mode = 'plusone', reg_type = 'tls')
regression_coefs <- getFEEs(df)
regression_coefs
df_amyl <- read.csv('../data_sets/amyl_Sanchez-Gorostiaga2019.csv')
head(df_amyl)
plotFEEs(df_amyl)
deltaF_amyl <- structureData(df_amyl)
deltaF_polymyxa <- deltaF_amyl[deltaF_amyl$focal_element == 'P', ]
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point() +
xlim(c(0, 15)) + ylim(c(0, 35))
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F) +
xlim(c(0, 15)) + ylim(c(0, 35))
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x)
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(P))) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x)
# hint: given a data frame "df" with two columns "x" and "y",
# we can fit a linear model of y vs. x by executing:
# > my_linmod <- lm(y ~ x, data = df)
# and obtain the slope and intercept examining the resulting object "my_linmod"
# > my_linmod$coefficients
fee_coefs <- getFEEs(df)
a_1 <- fee_coefs$intercept[1]
b_1 <- fee_coefs$slope[1]
a_1
a_4 <- fee_coefs$intercept[4]
b_4 <- fee_coefs$slope[4]
predicted_fun <- 0 + a_1 + a_4 + b_4*a_1
predicted_fun
target <- c(1,0,0,1,0,0,0,0) # the out-of-sample assemblage of interest
predicted_fun <- predictF(df, target)
predicted_fun
targets <- as.data.frame(matrix(c(1,0,0,1,0,0,0,0,
0,0,0,1,1,1,1,1),
nrow = 2,
byrow = T))
colnames(targets) <- paste('sp_', 1:8, sep = '')
head(targets)
predictF(df, targets)
test_set <- read.csv('../data_sets/pyoverdine-test_Diaz-Colunga2024.csv')
targets <- test_set[, 1:8]
predictions <- predictF(df, targets)
merged <- merge(test_set, predictions)
ggplot(merged, aes(x = predicted_fun, y = (function.rep1 + function.rep2)/2)) +
geom_abline(slope = 1, intercept = 0, color = 'gray') +
geom_point() +
xlim(0, 70) + ylim(0, 70) +
theme(aspect.ratio = 1)
predictions_withresiduals <- predictF(df, targets, infer_residuals = TRUE)
merged <- merge(test_set, predictions_withresiduals)
ggplot(merged, aes(x = predicted_fun, y = (function.rep1 + function.rep2)/2)) +
geom_abline(slope = 1, intercept = 0, color = 'gray') +
geom_point() +
xlim(0, 70) + ylim(0, 70) +
theme(aspect.ratio = 1)
df3 <- read.csv('../data_sets/pseudomonas-abs600-dilFactor0.025_Diaz-Colunga2024.csv')
head(df3)
inter_coeffs <- getInterCoefficients(df3)
head(inter_coeffs)
ggplot(inter_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
set.seed(0) # for reproducibility
F_i <- runif(8, min = 0, max = 1)
combinations <- df3[, 1:8]
model_fun <- sapply(1:nrow(combinations),
FUN = function(i) sum(F_i * combinations[i, ]))
model_df <- cbind(combinations, fun = model_fun)
head(model_df)
model_coeffs <- getInterCoefficients(model_df)
ggplot(model_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
noisy_fun <- model_fun + rnorm(length(model_fun),
mean = 0,
sd = sd(model_fun)/20)
noisy_df <- cbind(combinations, fun = noisy_fun)
plotLandscape(model_df)
plotLandscape(noisy_df)
noisy_coeffs <- getInterCoefficients(noisy_df)
ggplot(noisy_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
model_coeffs_fourier <- getInterCoefficients(model_df, mode = 'Fourier')
ggplot(model_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
noisy_coeffs_fourier <- getInterCoefficients(noisy_df, mode = 'Fourier')
ggplot(noisy_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
ggplot(data.frame(x = model_coeffs$value.mean, y = noisy_coeffs$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Taylor coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
ggplot(data.frame(x = model_coeffs_fourier$value.mean,
y = noisy_coeffs_fourier$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Fourier coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
delta_Fs <- structureData(df)
delta_Fs <- delta_Fs[, c(1:9, 14)]
colnames(delta_Fs)[10] <- 'delta_fun'
ggplot(delta_Fs, aes(x = delta_fun)) +
geom_histogram(bins = 20) +
facet_wrap(~focal_element) +
geom_vline(xintercept = 0,
color = 'gray')
delta_Fs_avg <- aggregate(delta_fun ~ focal_element,
data = delta_Fs,
FUN = mean)
deltaF_xylose <- structureData(df_xylose)
deltaF_xylose <- deltaF_xylose[deltaF_xylose$SL104 == 0, ]
deltaF_avg_xylose <- aggregate(delta_fun.mean ~ focal_element,
data = deltaF_xylose,
FUN = mean)
numerator <- deltaF_avg_xylose$delta_fun.mean[3]^2
denominator <- sum(deltaF_avg_xylose$delta_fun.mean[2:6]^2)
numerator / denominator
eff_inter_xylose <- getEffectiveInteractions(df_xylose)
subset(eff_inter_xylose, element_i == 'SL104' & element_j == 'SL187')$weight_ij.mean
eff_inter_SL104 <- subset(eff_inter_xylose, element_i == 'SL104')
estimated_slope <- sum(eff_inter_SL104$weight_ij.mean * eff_inter_SL104$effInter_ij.mean)
estimated_slope
fees_xylose <- getFEEs(df_xylose)
true_slope <- subset(fees_xylose, focal_element == 'SL104')$slope
true_slope
eff_inter_xylose$product <- eff_inter_xylose$weight_ij.mean * eff_inter_xylose$effInter_ij.mean
estimated_slopes_all <- aggregate(product ~ element_i,
data = eff_inter_xylose,
FUN = sum)
colnames(estimated_slopes_all)[2] <- 'estimated_slope'
ggplot(data.frame(estimated_slope = estimated_slopes_all$estimated_slope,
true_slope = fees_xylose$slope),
aes(x = estimated_slope, y = true_slope)) +
geom_abline(slope = 1, intercept = 0, color = 'gray') +
geom_point() +
theme(aspect.ratio = 1) +
xlim(-1.3, 0) + ylim(-1.3, 0)
View(df)
delta_Fs <- structureData(df)
View(delta_Fs)
delta_Fs <- delta_Fs[, c(1:9, 14)]
colnames(delta_Fs)[10] <- 'delta_fun'
ggplot(delta_Fs, aes(x = delta_fun)) +
geom_histogram(bins = 20) +
facet_wrap(~focal_element) +
geom_vline(xintercept = 0,
color = 'gray')
delta_Fs_avg <- aggregate(delta_fun ~ focal_element,
data = delta_Fs,
FUN = mean)
View(delta_Fs_avg)
View(df_xylose)
deltaF_xylose <- structureData(df_xylose)
deltaF_xylose <- subset(deltaF_xylose,
focal_element == 'SL104' & SL187 == 0)
deltaF_xylose <- structureData(df_xylose)
deltaF_xylose <- subset(deltaF_xylose,
focal_element == 'SL104' & SL187 == 0)
mean(deltaF_xylose$delta_fun.mean)
View(deltaF_xylose)
View(df_xylose)
View(deltaF_xylose)
deltaF_xylose <- structureData(df_xylose)
deltaF_xylose <- structureData(df_xylose)
deltaF_xylose <- subset(deltaF_xylose,
focal_element == 'SL104' & SL187 == 0)
deltaF_xylose <- structureData(df_xylose)
deltaF_xylose <- subset(deltaF_xylose,
focal_element == 'SL104' & SL187 == 0)
mean(deltaF_xylose$delta_fun.mean)
View(df)
F_B <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
View(F_B)
# background B
F_B <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B <- rowMeans(F_B[, 9:11])
# sp_1 knock-in
F_B_1 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_1 <- rowMeans(F_B_1[, 9:11])
# sp_5 knock-in
F_B_5 <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_5 <- rowMeans(F_B_5[, 9:11])
# double knock_in
F_B_1_5 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_1_5 <- rowMeans(F_B_1_5[, 9:11])
epsilon <- F_B_1_5 - F_B_1 - F_B_5 + F_B_1_5
epsilon
# background B
F_B <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B <- rowMeans(F_B[, 9:11])
# sp_1 knock-in
F_B_1 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_1 <- rowMeans(F_B_1[, 9:11])
# sp_5 knock-in
F_B_5 <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_5 <- rowMeans(F_B_5[, 9:11])
# double knock_in
F_B_1_5 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_1_5 <- rowMeans(F_B_1_5[, 9:11])
epsilon <- F_B_1_5 - F_B_1 - F_B_5 + F_B_1_5
epsilon
# background B
F_B <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B <- rowMeans(F_B[, 9:11])
# sp_1 knock-in
F_B_1 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B_1 <- rowMeans(F_B_1[, 9:11])
# sp_5 knock-in
F_B_5 <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B_5 <- rowMeans(F_B_5[, 9:11])
# double knock_in
F_B_1_5 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B_1_5 <- rowMeans(F_B_1_5[, 9:11])
epsilon <- F_B_1_5 - F_B_1 - F_B_5 + F_B_1_5
epsilon
# background B
F_B <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B <- rowMeans(F_B[, 9:11])
# sp_1 knock-in
F_B_1 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_1 <- rowMeans(F_B_1[, 9:11])
# sp_5 knock-in
F_B_5 <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_5 <- rowMeans(F_B_5[, 9:11])
# double knock_in
F_B_1_5 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 0 & sp_8 == 0)
F_B_1_5 <- rowMeans(F_B_1_5[, 9:11])
epsilon <- F_B_1_5 - F_B_1 - F_B_5 + F_B
epsilon
# background B
F_B <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B <- rowMeans(F_B[, 9:11])
# sp_1 knock-in
F_B_1 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 0 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B_1 <- rowMeans(F_B_1[, 9:11])
# sp_5 knock-in
F_B_5 <- subset(df,
sp_1 == 0 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B_5 <- rowMeans(F_B_5[, 9:11])
# double knock_in
F_B_1_5 <- subset(df,
sp_1 == 1 & sp_2 == 0 & sp_3 == 0 & sp_4 == 0 & sp_5 == 1 &
sp_6 == 0 & sp_7 == 1 & sp_8 == 1)
F_B_1_5 <- rowMeans(F_B_1_5[, 9:11])
epsilon <- F_B_1_5 - F_B_1 - F_B_5 + F
epsilon
df_repAvg <- cbind(df[, 1:8], fun = rowMeans(df[, 9:11]))
View(df_repAvg)
df_repAvg <- cbind(df[, 1:8], fun = rowMeans(df[, 9:11]))
backgrounds <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 0)
knockin_1 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 0)
knockin_5 <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 1)
knockin_15 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 1)
df_repAvg <- cbind(df[, 1:8], fun = rowMeans(df[, 9:11]))
backgrounds <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 0)
knockin_1 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 0)
knockin_5 <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 1)
knockin_15 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 1)
merged_df <- merge(backgrounds, knockin_1,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''))
View(merged_df)
df_repAvg <- cbind(df[, 1:8], fun = rowMeans(df[, 9:11]))
backgrounds <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 0)
knockin_1 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 0)
knockin_5 <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 1)
knockin_15 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 1)
merged_df <- merge(backgrounds, knockin_1,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('.B', '.B1'))
merged_df <- merge(merged_df, knockin_5,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('', '.B5'))
df_repAvg <- cbind(df[, 1:8], fun = rowMeans(df[, 9:11]))
backgrounds <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 0)
knockin_1 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 0)
knockin_5 <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 1)
knockin_15 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 1)
merged_df <- merge(backgrounds, knockin_1,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('.B', '.B1'))
merged_df <- merge(merged_df, knockin_5,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('', '.B5'))
merged_df <- merge(merged_df, knockin_15,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('', '.B15'))
df_repAvg <- cbind(df[, 1:8], fun = rowMeans(df[, 9:11]))
backgrounds <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 0)
knockin_1 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 0)
knockin_5 <- subset(df_repAvg,
sp_1 == 0 & sp_5 == 1)
knockin_15 <- subset(df_repAvg,
sp_1 == 1 & sp_5 == 1)
merged_df <- merge(backgrounds, knockin_1,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('.B', '.B1'))
merged_df <- merge(merged_df, knockin_5,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('', '.B5'))
merged_df <- merge(merged_df, knockin_15,
by = paste('sp_', c(2,3,4,6,7,8), sep = ''),
suffixes = c('', '.B15'))
merged_df <- merged_df[, c(paste('sp_', 1:8, sep = ''), 'fun.B', 'fun.B1', 'fun.B5', 'fun.B15')]
x <- getEffectiveInteractions(df)
View(x)
x <- getEffectiveInteractions(df)
x <- subset(x, element_i == 'sp_1' & element_j == 'sp_5')
x <- getEffectiveInteractions(df)
x <- subset(x, element_i == 'sp_1' & element_j == 'sp_5')
x$epsilon_ij.mean
View(df_xylose)
deltaF_xylose <- structureData(df_xylose)
View(deltaF_xylose)
deltaF_xylose <- deltaF_xylose[deltaF_xylose$SL104 == 0, ]
deltaF_avg_xylose <- aggregate(delta_fun.mean ~ focal_element,
data = deltaF_xylose,
FUN = mean)
View(deltaF_avg_xylose)
numerator <- deltaF_avg_xylose$delta_fun.mean[3]^2
denominator <- sum(deltaF_avg_xylose$delta_fun.mean[2:6]^2)
numerator / denominator
eff_inter_xylose <- getEffectiveInteractions(df_xylose)
View(eff_inter_xylose)
subset(eff_inter_xylose, element_i == 'SL104' & element_j == 'SL187')
subset(eff_inter_xylose, element_i == 'SL104' & element_j == 'SL187')$weight_ij.mean
eff_inter_SL104 <- subset(eff_inter_xylose, element_i == 'SL104')
View(eff_inter_SL104)
eff_inter_SL104 <- subset(eff_inter_xylose, element_i == 'SL104')
estimated_slope <- sum(eff_inter_SL104$weight_ij.mean * eff_inter_SL104$effInter_ij.mean)
estimated_slope
fees_xylose <- getFEEs(df_xylose)
true_slope <- subset(fees_xylose, focal_element == 'SL104')$slope
true_slope
eff_inter_xylose$product <- eff_inter_xylose$weight_ij.mean * eff_inter_xylose$effInter_ij.mean
estimated_slopes_all <- aggregate(product ~ element_i,
data = eff_inter_xylose,
FUN = sum)
colnames(estimated_slopes_all)[2] <- 'estimated_slope'
ggplot(data.frame(estimated_slope = estimated_slopes_all$estimated_slope,
true_slope = fees_xylose$slope),
aes(x = estimated_slope, y = true_slope)) +
geom_abline(slope = 1, intercept = 0, color = 'gray') +
geom_point() +
theme(aspect.ratio = 1) +
xlim(-1.3, 0) + ylim(-1.3, 0)
