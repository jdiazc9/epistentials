df2 <- read.csv('../data_sets/butyrate_Clark2021.csv')
nrow(unique(df2[, 1:25]))
counts <- table(do.call(paste, df2[, 1:25]))
hist(counts, breaks = 20)
head(as.data.frame(sort(counts, decreasing = TRUE)))
fraction_high <- sum(df2$function. > 30) / nrow(df2)
fraction_high
df2_rowAvgs <- aggregate(function. ~ .,
data = df2,
FUN = mean)
fraction_high <- sum(df2_rowAvgs$function. > 30) / nrow(df2_rowAvgs)
fraction_high
df <- read.csv('../data_sets/xylose_Langenheder2010.csv')
plotLandscape(df)
df_rep1 <- df[, 1:9]
df <- read.csv('../data_sets/xylose_Langenheder2010.csv')
plotLandscape(df)
require(testthat)
require(ggplot2)
require(tidyr)
require(gtools)
source('basic_functions.R')
df <- read.csv('../data_sets/pyoverdine-training_Diaz-Colunga2024.csv')
head(df)
nrow(unique(df[, 1:8]))
nrow(df)
df2 <- read.csv('../data_sets/butyrate_Clark2021.csv')
nrow(unique(df2[, 1:25]))
counts <- table(do.call(paste, df2[, 1:25]))
hist(counts, breaks = 20)
head(as.data.frame(sort(counts, decreasing = TRUE)))
fraction_high <- sum(df2$function. > 30) / nrow(df2)
fraction_high
df2_rowAvgs <- aggregate(function. ~ .,
data = df2,
FUN = mean)
fraction_high <- sum(df2_rowAvgs$function. > 30) / nrow(df2_rowAvgs)
fraction_high
df_xylose <- read.csv('../data_sets/xylose_Langenheder2010.csv')
plotLandscape(df_xylose)
df_rep1 <- df[, 1:9]
colnames(df_rep1)[9] <- 'fun'
delta_Fs <- structureData(df_rep1)
head(delta_Fs)
delta_Fs <- structureData(df)
head(delta_Fs)
ggplot(delta_Fs, aes(x = delta_fun.mean)) +
geom_histogram(bins = 20) +
facet_wrap(~focal_element) +
geom_vline(xintercept = 0,
color = 'gray')
plotFEEs(df)
plotFEEs(df, mode = 'plusone')
plotFEEs(df, mode = 'plusone', reg_type = 'tls')
regression_coefs <- getFEEs(df)
regression_coefs
df3 <- read.csv('../data_sets/pseudomonas-abs600-dilFactor0.025_Diaz-Colunga2024.csv')
head(df3)
inter_coeffs <- getInterCoefficients(df3)
head(inter_coeffs)
ggplot(inter_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
set.seed(0) # for reproducibility
F_i <- runif(8, min = 0, max = 1)
combinations <- df3[, 1:8]
model_fun <- sapply(1:nrow(combinations),
FUN = function(i) sum(combinations[i, ] * F_i))
model_df <- cbind(combinations, fun = model_fun)
head(model_df)
model_coeffs <- getInterCoefficients(model_df)
ggplot(model_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
noisy_fun <- model_fun + rnorm(length(model_fun),
mean = 0,
sd = sd(model_fun)/20)
noisy_df <- cbind(combinations, fun = noisy_fun)
noisy_coeffs <- getInterCoefficients(noisy_df)
ggplot(noisy_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
model_coeffs_fourier <- getInterCoefficients(model_df, mode = 'Fourier')
ggplot(model_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
noisy_coeffs_fourier <- getInterCoefficients(noisy_df, mode = 'Fourier')
ggplot(noisy_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
ggplot(data.frame(x = model_coeffs$value.mean, y = noisy_coeffs$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Taylor coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
ggplot(data.frame(x = model_coeffs_fourier$value.mean,
y = noisy_coeffs_fourier$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Fourier coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
require(testthat)
require(ggplot2)
require(tidyr)
require(gtools)
source('basic_functions.R')
df <- read.csv('../data_sets/pyoverdine-training_Diaz-Colunga2024.csv')
head(df)
nrow(unique(df[, 1:8]))
nrow(df)
df2 <- read.csv('../data_sets/butyrate_Clark2021.csv')
nrow(unique(df2[, 1:25]))
counts <- table(do.call(paste, df2[, 1:25]))
hist(counts, breaks = 20)
head(as.data.frame(sort(counts, decreasing = TRUE)))
fraction_high <- sum(df2$function. > 30) / nrow(df2)
fraction_high
df2_rowAvgs <- aggregate(function. ~ .,
data = df2,
FUN = mean)
fraction_high <- sum(df2_rowAvgs$function. > 30) / nrow(df2_rowAvgs)
fraction_high
df_xylose <- read.csv('../data_sets/xylose_Langenheder2010.csv')
plotLandscape(df_xylose)
plotLandscape(df)
df_rep1 <- df[, 1:9]
colnames(df_rep1)[9] <- 'fun'
delta_Fs <- structureData(df_rep1)
head(delta_Fs)
delta_Fs <- structureData(df)
head(delta_Fs)
ggplot(delta_Fs, aes(x = delta_fun.mean)) +
geom_histogram(bins = 20) +
facet_wrap(~focal_element) +
geom_vline(xintercept = 0,
color = 'gray')
plotFEEs(df)
plotFEEs(df, mode = 'plusone')
plotFEEs(df, mode = 'plusone', reg_type = 'tls')
regression_coefs <- getFEEs(df)
regression_coefs
df3 <- read.csv('../data_sets/pseudomonas-abs600-dilFactor0.025_Diaz-Colunga2024.csv')
head(df3)
inter_coeffs <- getInterCoefficients(df3)
head(inter_coeffs)
ggplot(inter_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
set.seed(0) # for reproducibility
F_i <- runif(8, min = 0, max = 1)
combinations <- df3[, 1:8]
model_fun <- sapply(1:nrow(combinations),
FUN = function(i) sum(combinations[i, ] * F_i))
model_df <- cbind(combinations, fun = model_fun)
head(model_df)
model_coeffs <- getInterCoefficients(model_df)
ggplot(model_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
noisy_fun <- model_fun + rnorm(length(model_fun),
mean = 0,
sd = sd(model_fun)/20)
noisy_df <- cbind(combinations, fun = noisy_fun)
noisy_coeffs <- getInterCoefficients(noisy_df)
ggplot(noisy_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
model_coeffs_fourier <- getInterCoefficients(model_df, mode = 'Fourier')
ggplot(model_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
noisy_coeffs_fourier <- getInterCoefficients(noisy_df, mode = 'Fourier')
ggplot(noisy_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
ggplot(data.frame(x = model_coeffs$value.mean, y = noisy_coeffs$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Taylor coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
ggplot(data.frame(x = model_coeffs_fourier$value.mean,
y = noisy_coeffs_fourier$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Fourier coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
View(df_xylose)
y <- df_xylose[df_xylose[, 1] == 0 & df_xylose[, 2] == 0 & df_xylose[, 3] == 0 & df_xylose[, 4] == 0, ]
View(y)
y <- df_xylose[df_xylose[, 1] == 0 & df_xylose[, 2] == 0 & df_xylose[, 3] == 0 & df_xylose[, 4] == 0, ]
plotLandscape(y)
y <- df_xylose[df_xylose[, 3] == 0 & df_xylose[, 4] == 0 & df_xylose[, 5] == 0 & df_xylose[, 6] == 0, ]
plotLandscape(y)
df_rep1 <- df[, 1:9]
delta_Fs <- structureData(df_rep1)
head(delta_Fs)
rm(list=ls())
require(testthat)
require(ggplot2)
require(tidyr)
require(gtools)
source('basic_functions.R')
df <- read.csv('../data_sets/pyoverdine-training_Diaz-Colunga2024.csv')
head(df)
nrow(unique(df[, 1:8]))
nrow(df)
df2 <- read.csv('../data_sets/butyrate_Clark2021.csv')
nrow(unique(df2[, 1:25]))
counts <- table(do.call(paste, df2[, 1:25]))
hist(counts, breaks = 20)
head(as.data.frame(sort(counts, decreasing = TRUE)))
fraction_high <- sum(df2$function. > 30) / nrow(df2)
fraction_high
df2_rowAvgs <- aggregate(function. ~ .,
data = df2,
FUN = mean)
fraction_high <- sum(df2_rowAvgs$function. > 30) / nrow(df2_rowAvgs)
fraction_high
df_xylose <- read.csv('../data_sets/xylose_Langenheder2010.csv')
plotLandscape(df_xylose)
plotLandscape(df)
df_rep1 <- df[, 1:9]
delta_Fs <- structureData(df_rep1)
head(delta_Fs)
delta_Fs <- structureData(df)
head(delta_Fs)
ggplot(delta_Fs, aes(x = delta_fun.mean)) +
geom_histogram(bins = 20) +
facet_wrap(~focal_element) +
geom_vline(xintercept = 0,
color = 'gray')
plotFEEs(df)
plotFEEs(df, mode = 'plusone')
plotFEEs(df, mode = 'plusone', reg_type = 'tls')
regression_coefs <- getFEEs(df)
regression_coefs
df3 <- read.csv('../data_sets/pseudomonas-abs600-dilFactor0.025_Diaz-Colunga2024.csv')
head(df3)
inter_coeffs <- getInterCoefficients(df3)
head(inter_coeffs)
ggplot(inter_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
set.seed(0) # for reproducibility
F_i <- runif(8, min = 0, max = 1)
combinations <- df3[, 1:8]
model_fun <- sapply(1:nrow(combinations),
FUN = function(i) sum(combinations[i, ] * F_i))
model_df <- cbind(combinations, fun = model_fun)
head(model_df)
model_coeffs <- getInterCoefficients(model_df)
ggplot(model_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
noisy_fun <- model_fun + rnorm(length(model_fun),
mean = 0,
sd = sd(model_fun)/20)
noisy_df <- cbind(combinations, fun = noisy_fun)
noisy_coeffs <- getInterCoefficients(noisy_df)
ggplot(noisy_coeffs, aes(x = order,
y = value.mean,
ymin = value.mean - value.sd,
ymax = value.mean + value.sd,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0,
position = position_dodge(width = 0.5),
alpha = 0.25)
model_coeffs_fourier <- getInterCoefficients(model_df, mode = 'Fourier')
ggplot(model_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
noisy_coeffs_fourier <- getInterCoefficients(noisy_df, mode = 'Fourier')
ggplot(noisy_coeffs_fourier, aes(x = order,
y = value.mean,
group = index)) +
geom_hline(yintercept = 0,
color = 'gray') +
geom_point(position = position_dodge(width = 0.5))
ggplot(data.frame(x = model_coeffs$value.mean, y = noisy_coeffs$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Taylor coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
ggplot(data.frame(x = model_coeffs_fourier$value.mean,
y = noisy_coeffs_fourier$value.mean),
aes(x = x, y = y)) +
geom_abline(slope = 1,
intercept = 0,
color = 'gray') +
geom_point() +
xlab('Clean data set coefficients') +
ylab('Noisy data set coefficients') +
ggtitle('Fourier coefficients') +
theme(aspect.ratio = 1) +
geom_blank(aes(x = y, y = x)) # small hack for equal x and y axis
View(df3)
df_amyl <- read.csv('../data_sets/amyl_Sanchez-Gorostiaga2019.csv')
head(df_amyl)
plotFEEs(df_amyl)
deltaF_amyl <- structureData(df_amyl)
deltaF_polymyxa <- deltaF_amyl[deltaF_amyl$focal_Element == 'P', ]
deltaF_amyl <- structureData(df_amyl)
deltaF_polymyxa <- deltaF_amyl[deltaF_amyl$focal_element == 'P', ]
View(deltaF_polymyxa)
deltaF_amyl <- structureData(df_amyl)
deltaF_polymyxa <- deltaF_amyl[deltaF_amyl$focal_element == 'P', ]
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point()
deltaF_polymyxa[order(deltaF_polymyxa$fun_background.mean), ]
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = `T`)) +
geom_point()
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point()
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_Smooth(method = 'lm', formula = y ~ x)
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x)
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F, fullrange = T)
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F, fullrange = TRUE) +
xlim(c(0, 15))
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F, fullrange = TRUE) +
xlim(c(0, 15)) + ylim(c(0, 35))
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F) +
xlim(c(0, 15)) + ylim(c(0, 35))
deltaF_amyl <- structureData(df_amyl)
deltaF_polymyxa <- deltaF_amyl[deltaF_amyl$focal_element == 'P', ]
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point() +
xlim(c(0, 15)) + ylim(c(0, 35))
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F) +
xlim(c(0, 15)) + ylim(c(0, 35))
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point()
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x)
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x, color = 'black')
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean,
color = P)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x, color = 'black')
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(P))) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x, color = 'black')
ggplot(deltaF_polymyxa, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(`T`))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = F) +
xlim(c(0, 15)) + ylim(c(0, 35))
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(P))) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x, color = 'black')
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean,
group = factor(P))) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x, color = 'black')
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x)
deltaF_subtilis <- deltaF_amyl[deltaF_amyl$focal_element == 'S', ]
ggplot(deltaF_subtilis, aes(x = fun_background.mean, y = delta_fun.mean,
color = factor(P))) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE, formula = y ~ x)
plotLandscape(model_df)
plotLandscape(noisy_df)
View(combinations)
